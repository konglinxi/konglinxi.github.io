{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"linux命令行(4)","slug":"linux命令行(3)","date":"2020-08-24T14:17:56.383Z","updated":"2020-08-25T03:38:44.227Z","comments":true,"path":"2020/08/24/linux命令行(3)/","link":"","permalink":"http://yoursite.com/2020/08/24/linux%E5%91%BD%E4%BB%A4%E8%A1%8C(3)/","excerpt":"","text":"进程管理1. stress (给系统增加负载或者进行压力测试) -t/–timeout N # N秒后超时-c/–cpu N # 孵化N个worker， 死循环sqrt() / CPU-i/–io N # 孵化N个worker， 死循环sync() / IO-m/–vm N # 孵化N个worker， 死循环malloc() / free() / Memory-d/–hdd N # 孵化N个worker， 死循环write() / unlink() / Disk 12# 示例stress --cpu 8 --io 4 --vm 2 --vm-bytes 128M --timeout 10s 2. top (显示或更新排序过的进程信息)默认按照cpu占用率排序 3. ps (process status)列出当前所有进程，默认只显示当前用户有控制终端的进程。 123$ ps aux # 显示当前所有进程，包括其他用户的$ ps aux | grep -i chrome | wc -l # 看一看Chrome起了多少个进程$ ps -l # 列出PPID等 4. kill &amp; killall(1) kill 123$ kill -signal-number/-signal_name PID$ kill PID # 默认发送15/TERM(software termination signal)$ kill -9/-KILL PID # 强力杀进程 (2) killall (按照名字杀进程) 12$ killall stress$ killall python # 名字常见可能误伤","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"}]},{"title":"linux命令行(2)","slug":"linux命令行(2)","date":"2020-08-24T13:32:12.095Z","updated":"2020-08-25T03:32:40.544Z","comments":true,"path":"2020/08/24/linux命令行(2)/","link":"","permalink":"http://yoursite.com/2020/08/24/linux%E5%91%BD%E4%BB%A4%E8%A1%8C(2)/","excerpt":"","text":"运行脚本1. 栗子(1) python脚本 123456789$ cat my_echo.pyimport sysdef main() print(&#x27; &#x27; .join(sys.argv[1:]))if __name__ == &#x27;__main__&#x27;: main()$ python3 my_echo.py hello world!hello world! (2) 向python脚本添加指定解释器 1234567$ cat my_echo.py#!/usr/bin/env python3import sysdef main() print(&#x27; &#x27; .join(sys.argv[1:]))if __name__ == &#x27;__main__&#x27;: main() (3) 其他操作 12345678$ chmod +x my_echo.py # 增加可执行权限$ ./my_echo.py hello world! # 运行脚本hello world!$ mv my_echo.py my_echo # 移动文件（改名）$ $PATH=$PATH:$PWD # 将当前路径添加到系统路径$ which my_echo # 查找my_echo位置 2. #!/usr/bin/env python3(1) Shebang: #! 使用哪个解释器解释脚本，放在第一行，并且是绝对路径 #!/bin/sh#!/bin/bash#!/usr/bin/perl#!/usr/bin/php (2) chmod (change mode) 123456789101112131415$ chmod +x foo # 添加可执行权限$ chmod -x foo # 移除可执行权限$ chmod 740 foo # 修改可执行权限为740 common： 644 -rw-r--r-- # default 755 -rwx-xr-x 777 -rwxrwxrwx # 危险！use chown/chgrp instead``` #### 3. 文件基本操作(1) mv (move -- 重命名， 剪切+粘贴)```bash$ mv hell.txt hello.txt # 重命名$ mv toffel /english/ # 移动文件夹 (2) cp (copy – 复制) 1$ cp -r dir1 dir2 # 复制文件夹 (3) rm(remove – 没有回收站) 1$ rm -r dir # 删除文件夹 4. $PATH12$ $PATH=$PATH:$PWD$ echo $PATH which: locate a program file in user’s path 5. 娱乐12$ yes # 一直输出yes$ yes | sudo spt-get install ... # 跳过用户确认","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"}]},{"title":"linux命令行(1)","slug":"linux命令行(1)","date":"2020-08-24T08:28:10.944Z","updated":"2020-08-24T13:32:56.085Z","comments":true,"path":"2020/08/24/linux命令行(1)/","link":"","permalink":"http://yoursite.com/2020/08/24/linux%E5%91%BD%E4%BB%A4%E8%A1%8C(1)/","excerpt":"","text":"初来乍到1. echo12$ echo huahua$ echo $HOME 2. cd3. pwd (print working directory)4. ls123$ ls -l #list mode$ ls -l -a = ls -la #list + all files$ ls -lh #list + human readable size 寻求帮助1. man (manual)12$ man pwd$ man man 2. 命令 -h 内置帮助文件文件内容1. cat (concatenate and print file – 打印文件内容)123$ cat a.txt$ cat a.txt b.txt # print a.txt and then b.txt$ cat &lt; a.txt # read from stdin 2. head / tail (头和尾)12$ head a.txt # 默认打印前10行$ tail a.txt / tail -n 5 a.txt 3. less (交互式模式)1$ less a.txt 4. grep (查找)1$ cat a.txt | grep aaa 4. wc (word, line and byte count)1$ cat a.txt | wc 重定向和管道1. 重定向：改变输入输出设备123$ echo hello &gt; hello.txt # redirect to a file$ echo world &gt;&gt; hello.txt # append to a file$ cat &lt; hello.txt # use file as stdin = read from file 2. 管道：将前一个命令的标准输出作为下一个命令的标准输入12$ man less | grep sim$ man less | grep -n sim | grep That &gt; that.txt #multiple pipes","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"}]},{"title":"","slug":"Test_BuildLog","date":"2020-08-24T06:25:32.056Z","updated":"2020-08-24T08:04:38.467Z","comments":true,"path":"2020/08/24/Test_BuildLog/","link":"","permalink":"http://yoursite.com/2020/08/24/Test_BuildLog/","excerpt":"","text":"Test_BuildLog测试上传内容，顺便记录搭建过程。 搭建过程安装hexobased on node.js, go to nodejs toinstall 1npm -v #显示版本号则搭建成功 使用淘宝的镜像源加快速度 12npm install -g cnpm --registry=https://registry.npm.taobao.orgcnpm -v #显示版本 使用cnpm安装hexo 12cnpm install -g hexo-clihexo -v 生成博客123456789cd blog #新建文件夹hexo inithexo s #启动，在localhost：4000# 创建新文章hexo new &quot;MyfirstBlog&quot;hexo clean #清理hexo g #生成hexo s #启动，在localhost：4000 部署到github新建repository，konglinxi.github.io，安装git并设置邮箱以及用户名。 12345# 设置邮箱以及用户名git config --global user.email “you@example.com”git config --global user.name “Your Name”# 安装部署插件cnpm install --save hexo-deployer-git 添加SSH Key。 12cd .ssh/ #usr/yourNamessh-keygen -t rsa -C &quot;you@example.com&quot; #修改为个人邮箱 成功后会生成两个文件id_rsa 以及id_rsa.pub在.ssh文件夹中， 复制id_rsa内容到github new SSH Key。 最后修改_config.yml最后内容: 123456deploy: type: git repo: git@github.com:konglinxi/konglinxi.github.io.git branch: master# 部署hexo d","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-08-24T05:12:24.023Z","updated":"2020-08-24T05:12:24.023Z","comments":true,"path":"2020/08/24/hello-world/","link":"","permalink":"http://yoursite.com/2020/08/24/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"}]}